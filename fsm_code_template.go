package main

import (
	"io"
	"text/template"
)

const FSM_CODE_TEMPLATE_FILE = `{{$FSMName := .Name}}
// Code generated by go generate; DO NOT EDIT
// This file was generated by robots at {{ .Timestamp }}
package {{.Package}}

type {{$FSMName}}State int

type {{$FSMName}}Stimulus int

const (
{{- range $index, $element := .States}}
	{{.Id}} {{$FSMName}}State = {{$index}}
{{- end}}
)

func Get{{$FSMName}}StateString(state {{$FSMName}}State) string {
	switch state {
{{- range .States}}
	case {{.Id}}:
		return "{{.Id}}"
{{- end}}
	default:
		return ""
	}
}
{{$FSMStimulus := .GetTransitions}}
const (
{{- range $index, $element := $FSMStimulus}}
	{{$element}} {{$FSMName}}Stimulus = {{$index}}
{{- end}}
)

func Get{{$FSMName}}StimulusString(stimulus {{$FSMName}}Stimulus) string {
	switch stimulus {
{{- range $element := $FSMStimulus}}
	case {{$element}}:
		return "{{$element}}"
{{- end}}
	default:
		return ""
	}
}

type StateMachine struct {
	CurrentState {{$FSMName}}State
	Data         interface{}
}

type fsmError struct {
	s string
}

func (e *fsmError) Error() string {
	return e.s
}

func (fsm *StateMachine) GetNextState(stimulus {{$FSMName}}Stimulus) ({{$FSMName}}State, error) {
	switch fsm.CurrentState {
{{- range $state := .States}}
		case {{.Id}}:
			switch stimulus {
{{- range $transition := $state.Transitions}}
			case {{.Event}}:
				return {{.Target}}, nil
{{- end}}
			default:
				return fsm.CurrentState, &fsmError{"Invalid stimulus"}
			}
{{- end}}
	default:
		return fsm.CurrentState, &fsmError{"Invalid stimulus"}
	}
}

func GetOnEntryCallback(state {{$FSMName}}State) []func(interface{}) {
	switch state {
{{- range .States}}
{{- if ne .OnEntryAction.Name ""}}
	case {{.Id}}:
		return []func(interface{}){ {{- .OnEntryAction.Name}}}
{{- end}}
{{- end}}
	default:
		return []func(interface{}){}
	}
}

func GetOnExitCallback(state {{$FSMName}}State) []func(interface{}) {
	switch state {
{{- range .States}}
{{- if ne .OnExitAction.Name ""}}
	case {{.Id}}:
		return []func(interface{}){ {{- .OnExitAction.Name}}}
{{- end}}
{{- end}}
	default:
		return []func(interface{}){}
	}
}

func GetOnLoopCallback(state {{$FSMName}}State) []func(interface{}) {
	switch state {
{{- range .States}}
{{- if ne .OnLoopAction.Name ""}}
	case {{.Id}}:
		return []func(interface{}){ {{- .OnLoopAction.Name}}}
{{- end}}
{{- end}}
	default:
		return []func(interface{}){}
	}
}

func (fsm *StateMachine) MoveNextState(stimulus {{$FSMName}}Stimulus) ({{$FSMName}}State, error) {
	nextState, err := fsm.GetNextState(stimulus)
	if err != nil {
		return fsm.CurrentState, err
	}
	cbs := GetOnExitCallback(fsm.CurrentState)
	for _, cb := range cbs {
		cb(fsm.Data)
	}
	if fsm.CurrentState == nextState {
		cbs = GetOnLoopCallback(fsm.CurrentState)
		for _, cb := range cbs {
			cb(fsm.Data)
		}
	} else {
		cbs = GetOnEntryCallback(nextState)
		for _, cb := range cbs {
			cb(fsm.Data)
		}
	}
	fsm.CurrentState = nextState
	return nextState, nil
}

func New{{$FSMName}}StateMachine(data interface{}) *StateMachine {
	return &StateMachine{ {{- .InitialState}}, data}
}

`

// GenerateCodeForFSM takes a parsed SCXML file and generated the code
// from a pre-defined template. All of the code for a FSM will be written
// in a single Writer.
func GenerateCodeForFSM(fsm *XMLStateMachine, outputFile io.Writer) error {
	fsmTemplate := template.Must(template.New(fsm.Name).Parse(FSM_CODE_TEMPLATE_FILE))
	return fsmTemplate.Execute(outputFile, fsm)
}
